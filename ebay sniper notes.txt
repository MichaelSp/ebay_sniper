Maintain the full abstraction to the ebay API request function, and build around it in the ebay_action model

Thoughts about calculating best bid: take average of all bid increases, check last bid increase. Find out how MaxBid works in "chinese" auctions

Make sure to change the currency based on get_item location (I think I got this to work, test currencies other than USD)

Use OutputSelector on get_item requests once I know all of the required field for the layout to shorten response time and server load

Ajax not working properly for edit auction pic cycle buttons. Add remote: true to link_to in _edit and retry
Redo buttons in edit auction page to cycle through pics

Center listing pictures vertically in auction index and edit

Change color of divider on auctions/edit, maybe add a different background color to listing details and snipe options to differentiate?

Fix update_auctions to only update online users' auctions using OutputSelector

Add been_notified:string column to auction. Every time the user is notified about a change, save what the notification was regarding. Ex: notifying a user about being outbid would change been_notified to "bid". If the user replies back with a change bid command, blank out been_notified. When sending out notifications, verify been_notified does not match the issue the user is being notified about.

Auction price being returned in Notification is not formatted to currency.

Pass the user ID when sending auth token request after user signup. Then in add_token in users_controller, find the user using :user_id param and then save the auth_token (and session id?) to user. When making ebay API calls, validate user auth_token exists. If not, redirect to a page telling them they have to allow app to access account, then grab another session_id and provide them a link to consent.

On auth_token consent fail, direct to app url page that explains they need to allow this app to access their account, grab a new session_id and provide them a link to consent. 


REDO VALIDATION CHECKING THAT AUCTION EXISTS


WORK ON LEAD TIME


Work on authentication user ebay account linking. If consent fails, redirect to users/consent_failed which generates a link from get_session_id and enables them to try again. Whenever user tries to do an EbayAction, validate that auth_token exists (on failure response, redirect to consent_failed?)
AUTHENTICATE AUTH_TOKEN ON USER SIGN IN. No need to authenticate existence with every EbayAction. On user sign_in, verify that auth_token exists and auth_token_exp has not passed. (Could create a rare problem if the user stays signed in and passes the auth_token_exp date, then all calls will fail without notice to user. Handle by checking exp date?)


Hours worked: 84.5 over 2 weeks


START SERVER WITH THIN
thin start --ssl -p 3001

----------Things to change once app is hosted elsewhere----------------
Twilio SMS routing URL
eBay consent form routing URL https://developer.ebay.com/DevZone/Account/AppSettings/Consent/?id=160565&s=1
Once app goes live, change all sandbox to production URLs


-------Processes to start----------
redis-server

rake resque:scheduler
  - Starts the resque scheduler

QUEUES=auction_bidder,auction_updater,notification_sender rake environment resque:work
  - Starts the resque queue worker
  - Priority (auction_bidder, auction_updater, notification_sender)



----------UI Bugs----------------
Align account-related links to right of nav-bar




----------Things to install and implement---------------
MySQL2 - (user: levion@localhost pass: levion)

Devise - user auth (tie to ebay account)

Resque - task queueing
Resque Scheduler
Redis
Redis store - session storing (config/initializers/session-store.rb)

Twilio (text message alerts if item price has passed user defined threshold. prompt if user wants to increase)
Bootstrap - Twitter CSS



----------Sandbox info----------------
#seller auth_token
"AgAAAA**AQAAAA**aAAAAA**n8gNUA**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6wFk4GhCZGGqQqdj6x9nY+seQ**194BAA**AAMAAA**RKYUL774WkhrRJGrHi1wS+VHDL2lOxG+Hoi9xx7Mm7jdbrh5BRv2UC93JN3Msn2EdwmnqhDwF2qxKFJYtY38YMMqKfpp+/GVB+WAta570T+LlCO5kKitdVTOal6EBhQRiMiKU9t7vGhTsi+ByQrShFpjH4Re3X6bQXNOGTjeWb1G+RdYOuH9NMELf7mVs6CBmWmhOdCuRow+Ekb/yVbGe1ZUfBcl55wYGI4AefPJTqoHgZuDEThrTeRs7TGFd3RaH5Cct+nMQrZRBEpUVeraUYEwCEct04qaRyfLm/EA4fvJcxp1znRr3BwGNwEam4OFeioQA4/bJMgmqU5eA8Unj8g7lLhYo2kWkspAG4aU5RkoFbMYctUDS2kSlQ3VtHJgmPwAHJVcPsWg2SO0B6Z+/SoPyToXiTFfNRSvgZXjxbzHmzringmRQ4yMwGdxDkD8rjFzTJTTCune42QH9WIqpjNPFwx+K3Y+V4qkPc2Q2b6VXQE/VOae0d5/4FrSQ8PMZB6SAbWSD/MfiX5ofpruOAHUGBG/9zpGXbPeESel2Jvv4DYpkRf0CLRiOAXrgW3PP1D1AnbHaVAR7PC/L9Lm0/BjJbWVlhKbaJyq/LIlv1JLwn4HInbWiR9XuXUGXshAGS+gZnGmzgNbAFllwT75opRiFdm2E1q4mOAntc9+1uviAYc5CxMs3igohPNut0JYdKDyQQyrGBOizIb1yM8kQRwfYiGRiTlyq/xrmkcjlK0+qM1dyFoaYaXvVQrh/sDc"


#buyer 1 auth_token
"AgAAAA**AQAAAA**aAAAAA**ffwOUA**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6wFk4GhCZGHpQidj6x9nY+seQ**194BAA**AAMAAA**nRHp2ssleJhryWIACS3o5NLnVCLDPHPrYPDOvb9LFoJ5/9X3Y7/g797fvhCSkGFJVL6HkzMSPR6cQrxXUQI+m3wumrBJYKrX/gLziBP13KJIeJnpFmr/iF0pSRNcP4IcJwbMkvCwejW8yoN5Y52amIpQGPyGwjYcoHP5zHw7YnSwA5nxNJ5JQSf7HSXRJwF0ITqpNoO/KAmjhWF05eTdDbUKShsDkKXCa0HLqeTSdMBO/1fxghqXWrMuEF+z9UybbkChe02kf3wpXgWvxxPPIXGGQAdleTwiUTs05tmQ++Tbu8uzxDoRYgnjb3BYIrldNtw+k2B+5XHpDmn53zgs8Kf8AXTjNAwBnh3H4FShcWd9Vz61xfNjYNTSobWinqgeaZ9hVezw5ESN6iz+fK8WzYLAfYGQvPi2QnB1WDHdNVM3LAc+0i6L3lvDe/YV21cBXcPLJKB39grYFcCbWRBL7WTC7Oigr9gX1rZGbWstjoiZsyXm4fgj+3k0olYWYbu+Ut8+vwxpYFkblvxpkFS/PFHBTiFA5JvYcLTW7Js/Tog/5usuo1N1/5oIV3TMqc9RV/KqNjkaZUve89iyeQKGDoLF8Xw5t9BHnVAoDh0S3+UjqEOkAncbHY+TgfqvHGO2hoBQW0kBzqZZw2ORYesnFS2jL0L9kQYXdSop4hHXD9OSTKrXgJkpVcTsfuRJip5haVEUNqi+4WdzbEuyvB+1AqXBV8a11FzH1eoZvWrqFRE5XtTi5qjPwc41/ngtO89U"


#buyer 2 auth_token
"AgAAAA**AQAAAA**aAAAAA**JwEPUA**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6wFk4GhCZGHpQqdj6x9nY+seQ**194BAA**AAMAAA**JUBbvNDChIaVw4CsP11T+Z4YIv4+XDR4Jsb0G/TezJjXyMaE4bBR92ZtZkhfuiOGNMGiSrKwrE/l0FbdXQLuMEJBIJubJYV0opjRMI1tm9HIxkK349SBZkk45E3P98jgY8llgL9NmMDNtEOKpaR8MZLyZ2q+hTDnfvxaP+WnEzbjzxLOKhhDpyAW7lPBgVps7V6Qu4aFLJ2xh3SfVGfXtBCSfMp7PWlPghVYXPKNCBn6ZziOYlso/5ucKfF7URKNBiev9Z0jBrVqnzO0vbbGDjJzcB5IQfVvSwBoMC5ljVTPXGMbxOsbao9SlY9iUzGWdV05YokVJUT4dTfxM9MzEsEs1RKonuuq3vIYOaeAtQxz7+WtG0nf4Npq8/c3RyehlLueUeuq43qmRwIROgrscWbA7aF3eYU+Cy/Jtvl68Ni2Zfa9GvuF9KvzWFaYd99mQmwd77EJX9MJgui7xzUioe6vi2KNOIMJ1mZKG/AtBDfUU4fWUy/6PsGJ9tR9VpQYRN6zV8szTu2X1lIgkYpBo7sjpSWp+OgJGdbY/oiMKep7dAFT++02xRBsZs3CsMzHRwpYXsDrk42ydu/kxaKC4ip3n0q1Vdt6s3uQE3bfs+0tTlOLOiDYsHjc5rL6W0h3q42kESO5hmfPgmx4YJmx7H94aeZmZriRVEHIueDysd2fij34GBvZGwUhyun9OwrF50eop9bAjlPd+k2EEC1sYRADeNbs5JQaZMyutI3XYffirfGiMPigmfu+mMJCkGGu"





---------------API REQUEST EXAMPLE----------------
<%= form_tag "/home/get_item", :method => "get" do %>
	<%= label_tag :item_id, "Get the item's information" %>
	<%= text_field_tag :item_id %>
	<%= submit_tag "Submit" %>
<% end %>
<%= form_tag "/home/place_bid", :method => "post" do %>
	<%= label_tag :item_id, "Place a bid on the item" %>
	<%= text_field_tag :item_id %>
	<%= label_tag :amount, "for" %>
	<%= text_field_tag :amount %> dollars.
	<%= submit_tag "Submit" %>
<% end %>



def getTimeTest

@client ||= Savon::Client.new do
 wsdl.endpoint = "https://api.sandbox.ebay.com/wsapi?siteid=0&routing=beta&callname=GeteBayOfficialTime&version=423&appid=Leviona4d-c40e-454f-9d49-dd510693f96"
 wsdl.namespace = "urn:ebay:apis:eBLBaseComponents"
end


response = @client.request "GeteBayOfficialTimeRequest" do
 soap.body = { "Version" => "423" }
 soap.input = "GeteBayOfficialTimeRequest", { "xmlns" => "urn:ebay:apis:eBLBaseComponents" }
 soap.header = { "ebl:RequesterCredentials" => { "ebl:eBayAuthToken" => "AgAAAA**AQAAAA**aAAAAA**n8gNUA**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6wFk4GhCZGGqQqdj6x9nY+seQ**194BAA**AAMAAA**RKYUL774WkhrRJGrHi1wS+VHDL2lOxG+Hoi9xx7Mm7jdbrh5BRv2UC93JN3Msn2EdwmnqhDwF2qxKFJYtY38YMMqKfpp+/GVB+WAta570T+LlCO5kKitdVTOal6EBhQRiMiKU9t7vGhTsi+ByQrShFpjH4Re3X6bQXNOGTjeWb1G+RdYOuH9NMELf7mVs6CBmWmhOdCuRow+Ekb/yVbGe1ZUfBcl55wYGI4AefPJTqoHgZuDEThrTeRs7TGFd3RaH5Cct+nMQrZRBEpUVeraUYEwCEct04qaRyfLm/EA4fvJcxp1znRr3BwGNwEam4OFeioQA4/bJMgmqU5eA8Unj8g7lLhYo2kWkspAG4aU5RkoFbMYctUDS2kSlQ3VtHJgmPwAHJVcPsWg2SO0B6Z+/SoPyToXiTFfNRSvgZXjxbzHmzringmRQ4yMwGdxDkD8rjFzTJTTCune42QH9WIqpjNPFwx+K3Y+V4qkPc2Q2b6VXQE/VOae0d5/4FrSQ8PMZB6SAbWSD/MfiX5ofpruOAHUGBG/9zpGXbPeESel2Jvv4DYpkRf0CLRiOAXrgW3PP1D1AnbHaVAR7PC/L9Lm0/BjJbWVlhKbaJyq/LIlv1JLwn4HInbWiR9XuXUGXshAGS+gZnGmzgNbAFllwT75opRiFdm2E1q4mOAntc9+1uviAYc5CxMs3igohPNut0JYdKDyQQyrGBOizIb1yM8kQRwfYiGRiTlyq/xrmkcjlK0+qM1dyFoaYaXvVQrh/sDc" }, :attributes! => { "ebl:RequesterCredentials" => { "xmlns:ebl" => "urn:ebay:apis:eBLBaseComponents"} } }
end

return response.body
end